<add>
NAME:	add
LIB:	core
USAGE:	num1 num2 add
DESC:	Adds num1 and num2, and pushes the result onto the stack.
NOTES:	num1 and num2 have to be numbers.
</add>
<sub>
NAME:	sub
LIB:	core
USAGE:	num1 num2 sub
DESC:	Subtracts num1 and num2, and pushes the result onto the stack.
NOTES:	num1 and num2 have to be numbers.
</sub>
<mul>
NAME:	mul
LIB:	core
USAGE:	num1 num2 mul
DESC:	Multiplies num1 and num2, and pushes the result onto the stack.
NOTES:	num1 and num2 have to be numbers.
</mul>
<div>
NAME:	div
LIB:	core
USAGE:	num1 num2 div
DESC:	Divides num1 and num2, and pushes the result onto the stack.
NOTES:	Num1 and num2 have to be numbers.
	Num2 cannot be zero.
</div>
<disp>
NAME:	disp
LIB:	core
USAGE:	item disp
DESC:	Takes the top item off of the stack and displays it.
</disp>
<peek>
NAME:	peek
LIB:	core
USAGE:	item peek
DESC:	Like disp, but it does not pop the top element.
</peek>
<dup>
NAME:	dup
LIB:	core
USAGE:	item dup
DESC:	Takes the top item off of the stack and pushes 2 copies of it.
</dup>
<drop>
NAME:	drop
LIB:	core
USAGE:	item drop
DESC:	Takes the top item off the stack.
</drop>
<swap>
NAME:	swap
LIB:	core
USAGE:	it1 it2 swap
DESC:	Swaps the top 2 items on the stack, so that 1 2 -} 2 1 .
</swap>
<rot>
NAME:	rot
LIB:	core
USAGE:	i1 i2 i3 rot
DESC:	Takes the 3 top items on the stack and pushes them on in
	reverse order, so that 1 2 3 -} 3 2 1 .
</rot>
<clear>
NAME:	clear
LIB:	core
USAGE:	clear
DESC:	Empties the entire stack.
</clear>
<cls>
NAME:	cls
LIB:	core
USAGE:	cls
DESC:	Clears the screen.
</cls>
<dump>
NAME:	dump
LIB:	core
USAGE:	dump
DESC:	Displays the contents of the stack.
</dump>
<mkdir>
NAME:	mkdir
LIB:	core
USAGE:	name mkdir
DESC:	Creates a new directory called name.
NOTES:	Name must be a string.
SAMEAS:	prefix :
</mkdir>
<chdir>
NAME:	chdir
LIB:	core
USAGE:	name chdir
DESC:	Changes the current directory called name.
NOTES:	Name must be a string and either be a valid directory
	name or '..' .
SAMEAS:	prefix rb
</chdir>
<isdir>
NAME:	isdir
LIB:	core
USAGE:	name isdir
DESC:	Pushes 1 if name is a directory, 0 otherwise.
NOTES:	Name must be a string.
</isdir>
<del>
NAME:	del
LIB:	core
USAGE:	name del
DESC:	Deletes the item at name.
SAMEAS:	prefix ~
</del>
<sto>
NAME:	sto
LIB:	core
USAGE:	val name sto
DESC:	Stores val in the variable called name.
NOTES:	Name must be a string.
SAMEAS:	prefix =
</sto>
<rcl>
NAME:	rcl
LIB:	core
USAGE:	name rcl
DESC:	Recalls the variable in name to the stack.
NOTES:	Name must be a string and cannot be a directory name.
SAMEAS:	prefix $
</rcl>
<list>
NAME:	list
LIB:	core
USAGE:	list
DESC:	Displays all the items in the current directory.
SAMEAS:	prefix @
</list>
<dir>
NAME:	dir
LIB:	core
USAGE:	dir
DESC:	Displays the current path.
</dir>
<exec>
NAME:	exec
LIB:	core
USAGE:	code exec
DESC:	Executes code as RPOS batch.
NOTES:	Code must be a string.
</exec>
<eq>
NAME:	eq
LIB:	core
USAGE:	i1 i2 eq
DESC:	Pushes 1 if i1 and i2 are equal, 0 otherwise.
</eq>
<ne>
NAME:	ne
LIB:	core
USAGE:	i1 i2 ne
DESC:	Pushes 1 if i1 and i2 are not equal, 0 otherwise.
</ne>
<lt>
NAME:	lt
LIB:	core
USAGE:	i1 i2 lt
DESC:	Pushes 1 if i1 is less than i2, 0 otherwise.
</lt>
<le>
NAME:	le
LIB:	core
USAGE:	i1 i2 le
DESC:	Pushes 1 if i1 is less than or equal to i2, 0 otherwise.
</le>
<gt>
NAME:	gt
LIB:	core
USAGE:	i1 i2 gt
DESC:	Pushes 1 if i1 is greater than i2, 0 otherwise.
</gt>
<ge>
NAME:	ge
LIB:	core
USAGE:	i1 i2 ge
DESC:	Pushes 1 if i1 is greater than or equal to i2, 0 otherwise.
</ge>
<not>
NAME:	not
LIB:	core
USAGE:	bool not
DESC:	Pushes 0 if bool is 1, 0 otherwise.
</not>
<and>
NAME:	and
LIB:	core
USAGE:	b1 b2 and
DESC:	Pushes 1 if b1 and b2 are 1, 0 otherwise.
</and>
<or>
NAME:	or
LIB:	core
USAGE:	b1 b2 or
DESC:	Pushes 1 if b1 or b2 is 1, 0 otherwise.
</or>
<doif>
NAME:	doif
LIB:	core
USAGE:	bool code doif
DESC:	Executes code if bool is 1.
NOTES:	Code must be a string.
SAMEAS:	prefix ?
</doif>
<while>
NAME:	while
LIB:	core
USAGE:	cond code while
DESC:	Keeps executing code while the code in cond evaluates to 1.
NOTES:	Cond and code bust be strings.
</while>
<rep>
NAME:	rep
LIB:	core
USAGE:	num code rep
DESC:	Executes code num times and pushes the current iteration
	on the stack.
NOTES:	Num must be a number, and code must be a string.
</rep>
<repdir>
NAME:	repdir
LIB:	core
USAGE:	name code repdir
DESC:	For every item in the directory called name, pushes
	the item's name and executes code.
NOTES:	Name and code must be strings. Name must be a valid
	directory name, '.', or '..' .
</repdir>
<size>
NAME:	size
LIB:	core
USAGE:	name size
DESC:	Pushes the number of items in the directory called name.
NOTES:	name must be a valid directory name, '.', or '..' .
SAMEAS:	prefix #
</size>
<join>
NAME:	join
LIB:	core
USAGE:	s1 s2 join
DESC:	Joins s1 and s2 together, and pushes it on the stack.
</join>
<move>
NAME:	move
LIB:	core
USAGE:	old new move
DESC:	Moves the directory called old into the directory
	called new.
NOTES:	old must be strings and must be a valid directory
	name. New may also be '..' .
</move>
<copy>
NAME:	copy
LIB:	core
USAGE:	old new copy
DESC:	Copies the directory called old into the directory
	called new.
NOTES:	old must be strings and must be a valid directory
	name. New may also be '..' .
</copy>
<lib>
NAME:	lib
LIB:	core
USAGE:	name lib
DESC:	Imports the library called name.
NOTES:	Name must be a string and a valid library name.
	Libraries are in the enclosing filesystem and have
	the .rlib prefix. Libraries are written in Lua.
SAMEAS:	prefix *
</lib>
<libcmd>
NAME:	libcmd
LIB:	core
USAGE:	list name libcmd
DESC:	Imports the commands in list from library called name.
NOTES:	Name must be a string and a valid library name.
	Libraries are in the enclosing filesystem and have
	the .rlib prefix. Libraries are written in Lua.
	List must be a space-separated string.
</libcmd>
<func>
NAME:	func
LIB:	core
USAGE:	code name func
DESC:	Creates a user-defined command called name. When name is
	referenced as a command later, code will be executed.
NOTES:	Code and name must be strings.
</func>
<isvar>
NAME:	isvar
LIB:	core
USAGE:	name isvar
DESC:	Pushes 1 if name is a valid item, 0 otherwise.
NOTES:	Name must be a string.
</isvar>
<isfunc>
NAME:	isfunc
LIB:	core
USAGE:	name isfunc
DESC:	Pushes 1 if name is a valid command, 0 otherwise.
NOTES:	Name must be a string.
</isfunc>
<delfunc>
NAME:	delfunc
LIB:	core
USAGE:	name delfunc
DESC:	Deletes the command called name.
	WARNING!!! This may cause great damage to the system.
		   Use this command wisely.
NOTES:	Name must be a string.
</delfunc>
<type>
NAME:	type
LIB:	core
USAGE:	item type
DESC:	Pushes 'number' if item is a number, 0 otherwise.
</type>
<substr>
NAME:	substr
LIB:	core
USAGE:	str start end substr
DESC:	Gets the substring of str, starting at start and
	ending and end.
NOTES:	start and end must be numbers. Str must be a string.
</substr>
<inp>
NAME:	inp
LIB:	core
USAGE:	inp
DESC:	Gets a line of input and pushes it to the stack.
</inp>
<write>
NAME:	write
LIB:	core
USAGE:	write
DESC:	Gets input until the sysvar termchr is typed on a newline,
	and then pushes it.
SAMEAS:	prefix }
</write>
<root>
NAME:	root
LIB:	core
USAGE:	root
DESC:	Sets the current directory to root.
</root>
<import>
NAME:	import
LIB:	core
USAGE:	name import
DESC:	Pushes the contents of outside file called name.
NOTES:	Files are in the outside filesystem and have the
	.rfil extension.
</import>
<export>
NAME:	export
LIB:	core
USAGE:	val name export
DESC:	Set the contents of outside file called name to val.
NOTES:	Files are in the outside filesystem and have the
	.rfil extension.
</export>
<save>
NAME:	save
LIB:	core
USAGE:	save
DESC:	Saves the system state to an outside file.
NOTES:	System Saves are in the outside filesystem and
	have the .rsav extension.
</save>
<load>
NAME:	load
LIB:	core
USAGE:	load
DESC:	Loads the system state from an outside file.
NOTES:	System Saves are in the outside filesystem and
	have the .rsav extension.
</load>
<call>
NAME:	call
LIB:	core
USAGE:	name call
DESC:	Executes the outside file called name in RPOS batch.
NOTES:	name must be a string. Files are in the outside
	filesystem and have the .rfil extension.
SAMEAS:	prefix %
</call>
<run>
NAME:	run
LIB:	core
USAGE:	name run
DESC:	Executes the outside file called name as Lua code.
NOTES:	name must be a string. Files are in the outside
	filesystem and have the .rfil extension.
</run>
<ren>
NAME:	ren
LIB:	core
USAGE:	name newname ren
DESC:	Renames the item called name to newname.
NOTES:	Name and newname must be strings. Name must be a
	valid item name.
</ren>
<prompt>
NAME:	prompt
LIB:	core
USAGE:	opt prompt
DESC:	Configures the prompt based on opt.
	If opt is, it shows:
		'S' - the size of the stack.
		'T' - the top item on the stack.
		'D' - The current path.
		'C' - The current directory's name.
</prompt>
<help>
NAME:	help
LIB:	core
USAGE:	help
DESC:	Enters RPOS Interactive Help.
</help>
<info>
NAME:	info
LIB:	core
USAGE:	info
DESC:	Displays the RPOS version information.
</info>
<alias>
NAME:	alias
LIB:	core
USAGE:	old new alias
DESC:	Aliases the command called old as new.
NOTES:	Old and new must be strings.
</alias>
<pshdir>
NAME:	pshdir
LIB:	core
USAGE:	pshdir
DESC:	Pushes the current path on to the stack.
</pshdir>
<popdir>
NAME:	popdir
LIB:	core
USAGE:	dr popdir
DESC:	Sets the current path to dr.
NOTES:	dr has to be a string.
</popdir>
<len>
NAME:	len
LIB:	core
USAGE:	str len
DESC:	Returns the length of str.
NOTES:	str has to be a string.
</len>
<tos>
NAME:	tos
LIB:	core
USAGE:	itm tos
DESC:	Converts itm to a string.
</tos>
<ton>
NAME:	ton
LIB:	core
USAGE:	itm ton
DESC:	Converts itm to a number.
</ton>
<'>
PREFIX:	'
DESC:	Builds a string. The characters after ' are pushed
	as a string.
</'>
<">
PREFIX:	"
DESC:	Builds a string. The characters after " are pushed
	as a string after replacing the occurrences of the
	sysvar srcchr with the sysvar repchr.
</">
<$>
PREFIX:	$
DESC:	Recalls the referenced variable.
NOTES:	the referenced name must be a valid variable name.
</$>
<=>
PREFIX:	=
DESC:	Pops a value off the stack and sets the referenced variable
	to it.
</=>
<:>
PREFIX:	:
DESC:	Creates the referenced name as a directory.
</:>
<rb>
PREFIX:	Right Bracket
DESC:	Changes the current directory to the referenced directory.
NOTES:	The characters after must be a valid directory.
</rb>
<~>
PREFIX:	~
DESC:	Deletes the referenced item.
</~>
<?>
PREFIX:	?
DESC:	Does the referenced command if the top value on the
	stack is 1.
</?>
<@>
PREFIX:	@
DESC:	Displays the items in the referenced directory.
NOTES:	the referenced name must be a valid directory.
</@>
<#>
PREFIX:	#
DESC:	Displays the number of items in the referenced directory.
NOTES:	the referenced name must be a valid directory.
</#>
<&>
PREFIX:	&
DESC:	Displays the contents of the referenced item.
</&>
<%>
PREFIX:	%
DESC:	Calls the outside file referenced as RPOS batch code.
NOTES:	Files are in the enclosing filesystem and have
	the .rfil prefix.
</%>
<*>
PREFIX:	*
DESC:	Imports the library referenced.
NOTES:	Libraries are in the enclosing filesystem and have
	the .rlib prefix. Libraries are written in Lua.
</*>
<}>
PREFIX:	}
DESC:	Puts what you input until CTRL+D into the referenced variable.
</}>
<+>
PREFIX:	+
DESC:	Adds to the referenced variable the sysvar inc.
NOTES:	the referenced name must be a number variable.
</+>
<->
PREFIX:	-
DESC:	Subtracts to the referenced variable the sysvar inc.
NOTES:	the referenced name must be a number variable.
</->
<sysvar>
TOPIC:	SYSVARS
DATA:	Sysvars are variables in root\sys. They are created when the
	system starts and have a direct effect on system function.
	To get help on a specific sysvar, type 'sysvar (name)'.
	To get a list of all sysvars, type 'list sysvar'.
</sysvar>
<sysvars>
TOPIC:	SYSVARS
DATA:	Sysvars are variables in root\sys. They are created when the
	system starts and have a direct effect on system function.
	To get help on a specific sysvar, type 'sysvar (name)'.
	To get a list of all sysvars, type 'list sysvar'.
</sysvars>
<command>
TOPIC:	COMMANDS
DATA:	Commands are the basic operations in RPOS. Commands are
	space-seperated. Commands may also use data from the stack
	or put data on the stack.
	To get help on a command, type its name.
	To list all predefined commands, type 'list core'.
</command>
<commands>
TOPIC:	COMMANDS
DATA:	Commands are the basic operations in RPOS. Commands are
	space-seperated. Commands may also use data from the stack
	or put data on the stack.
	To get help on a command, type its name.
	To list all predefined commands, type 'list core'.
</commands>
<prefix>
TOPIC:	PREFIXES
DATA:	Words in input may have a one-character symbol prefix
	before them. This prefix affects the way the following
	characters are executed.
	To get help on a prefix, type its character.
	To list all prefixes, type 'list prefix'.
</prefix>
<prefixes>
TOPIC:	PREFIXES
DATA:	Words in input may have a one-character symbol prefix
	before them. This prefix affects the way the following
	characters are executed.
	To get help on a prefix, type its character.
	To list all prefixes, type 'list prefix'.
</prefixes>
<list core>
LIST:	Commands in library 'core'
DATA:	add sub mul div disp peek dup drop swap rot clear cls
	dump mkdir chdir isdir del sto rcl list dir exec eq ne
	lt le gt ge not and or doif while rep repdir size join
	move copy lib libcmd func isvar isfunc delfunc type
	substr inp write exit root import export load save call
	run ren prompt help info alias pshdir popdir len tos ton
</list core>
<list prefix>
LIST:	Prefixes
DATA:	' " $ = rb : ~ ? @ # & % * } + -
</list prefix>
<list sysvar>
LIST:	Sysvars
DATA:	errs disp srcchr repchr version bdate joinchr inc pcf1
	pcf2 pcf3 errmsg pshloop term libs platform termchr
</list sysvar>
<sysvar errs>
NAME:	errs
TYPE:	number
DFAULT:	1
DESC:	Set errs to 1 to display error messages, 0 otherwise.
</sysvar errs>
<sysvar disp>
NAME:	disp
TYPE:	number
DFAULT:	0
DESC:	Set disp to 1 to display pushed items, 0 otherwise.
</sysvar disp>
<sysvar srcchr>
NAME:	srcchr
TYPE:	string
DFAULT:	_
DESC:	Used in the prefix " as the character to replace.
</sysvar srcchr>
<sysvar repchr>
NAME:	repchr
TYPE:	string
DFAULT:
DESC:	Used in the prefix " as the character to replace with.
</sysvar repchr>
<sysvar version>
NAME:	version
TYPE:	number
DFAULT:	-varies-
DESC:	The current version number.
</sysvar version>
<sysvar bdate>
NAME:	bdate
TYPE:	string
DFAULT:	-varies-
DESC:	The current build date.
</sysvar bdate>
<sysvar joinchr>
NAME:	joinchr
TYPE:	string
DFAULT:
DESC:	What to put in between the two arguments of the join command.
</sysvar joinchr>
<sysvar inc>
NAME:	inc
TYPE:	number
DFAULT:	1
DESC:	What to increment and decrement variables by in the + and -
	prefixes.
</sysvar inc>
<sysvar pcf1>
NAME:	pcf1
TYPE:	string
DFAULT:
DESC:	What to display before pcf2 in the prompt.
</sysvar pcf1>
<sysvar pcf2>
NAME:	pcf2
TYPE:	string
DFAULT:	S
DESC:	what the prompt displays. Don't set this sysvar directly,
	use the prompt command.
</sysvar pcf2>
<sysvar pcf3>
NAME:	pcf3
TYPE:	string
DFAULT:	rb
DESC:	What to display after pcf2 in the prompt.
</sysvar pcf3>
<sysvar errmsg>
NAME:	errmsg
TYPE:	string
DFAULT:
DESC:	The message of the last error that occured.
</sysvar errmsg>
<sysvar pshloop>
NAME:	pshloop
TYPE:	number
DFAULT:	1
DESC:	Set to 1 to push the counter in the commands rep and repdir,
	0 otherwise.
</sysvar pshloop>
<sysvar term>
NAME:	term
TYPE:	number
DFAULT:	0
DESC:	Set to 1 to terminate on errors, 0 otherwise.
</sysvar term>
<sysvar libs>
NAME:	libs
TYPE:	directory
DFAULT:	-dir-
DESC:	Contains the names of the commands from all the imported
	libraries.
</sysvar libs>
<sysvar platform>
NAME:	platform
TYPE:	string
DFAULT:	-varies-
DESC:	The platform of the RPOS shell currently running.
</sysvar platform>
<sysvar termchr>
NAME:	termchr
TYPE:	string
DFAULT:	CTRL+D
DESC:	The charatcer that terminates the write command.
</sysvar termchr>
<number>
DATA TYPE
TYPE:	Numbers
DESC:	When number values are encountered in code, they are pushed
	onto the stack. Unlike most classic shells, RPOS works
	directly with numbers.
</number>
<numbers>
DATA TYPE
TYPE:	Numbers
DESC:	When number values are encountered in code, they are pushed
	onto the stack. Unlike most classic shells, RPOS works
	directly with numbers.
</numbers>
<string>
DATA TYPE
TYPE:	Strings
DESC:	Strings are pushed onto the stack by using the ' and "
	prefixes.
</string>
<strings>
DATA TYPE
TYPE:	Strings
DESC:	Strings are pushed onto the stack by using the ' and "
	prefixes.
</strings>
<directory>
DATA TYPE
TYPE:	Directories
DESC:	Directories are constructed with the mkdir command. They
	contain a collection of items, each with a name. These form
	the filesystem standard to shells. Note that directories
	cannot be pushed onto the stack.
</directory>
<directories>
DATA TYPE
TYPE:	Directories
DESC:	Directories are constructed with the mkdir command. They
	contain a collection of items, each with a name. These form
	the filesystem standard to shells. Note that directories
	cannot be pushed onto the stack.
</directories>
<about>
TOPIC:	About RPOS
DESC:	RPOS Stands for 'Reverse POlish Shell'. RPOS is a funny little
	project created by Iconmaster in the Febuary of
	2011. RPOS is meant to be a proto-shell that is small, simple,
	efficent, and modular. It uses a stack to manipulate both
	strings and numbers on; thus making it use Reverse Polish
	Notation. It also has a simple filesystem, making it like any
	other usefull shell. RPOS is written in Lua 5.1.
</about>
